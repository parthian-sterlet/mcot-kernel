long double lnfact[171] =
{ 0.000000000000,  0.000000000000,  0.693147180560,  1.791759469228,  3.178053830348,  4.787491742782,  6.579251212010,  8.525161361065, 10.604602902745, 12.801827480082,
 15.104412573076, 17.502307845874, 19.987214495662, 22.552163853123, 25.191221182739, 27.899271383841, 30.671860106081, 33.505073450137, 36.395445208033, 39.339884187200,
 42.335616460754, 45.380138898477, 48.471181351835, 51.606675567764, 54.784729398112, 58.003605222981, 61.261701761002, 64.557538627006, 67.889743137182, 71.257038967168,
 74.658236348830, 78.092223553315, 81.557959456115, 85.054467017582, 88.580827542198, 92.136175603687, 95.719694542143, 99.330612454787,102.968198614514,106.631760260643,
 110.320639714757,114.034211781462,117.771881399745,121.533081515439,125.317271149357,129.123933639127,132.952575035616,136.802722637326,140.673923648234,144.565743946345,
 148.477766951773,152.409592584497,156.360836303079,160.331128216631,164.320112263195,168.327445448428,172.352797139163,176.395848406997,180.456291417544,184.533828861449,
 188.628173423672,192.739047287845,196.866181672890,201.009316399282,205.168199482641,209.342586752537,213.532241494563,217.736934113954,221.956441819130,226.190548323728,
 230.439043565777,234.701723442818,238.978389561834,243.268849002983,247.572914096187,251.890402209723,256.221135550010,260.564940971863,264.921649798553,269.291097651020,
 273.673124285694,278.067573440366,282.474292687630,286.893133295427,291.323950094270,295.766601350761,300.220948647014,304.686856765669,309.164193580147,313.652829949879,
 318.152639620209,322.663499126726,327.185287703775,331.717887196928,336.261181979198,340.815058870799,345.379407062267,349.954118040770,354.539085519441,359.134205369575,
 363.739375555563,368.354496072405,372.979468885689,377.614197873919,382.258588773060,386.912549123218,391.575988217330,396.248817051792,400.930948278916,405.622296161145,
 410.322776526937,415.032306728250,419.750805599545,424.478193418257,429.214391866652,433.959323995015,438.712914186121,443.475088120919,448.245772745385,453.024896238496,
 457.812387981278,462.608178526875,467.412199571608,472.224383926981,477.044665492586,481.872979229888,486.709261136839,491.553448223298,496.405478487218,501.265290891579,
 506.132825342035,511.008022665236,515.890824587822,520.781173716044,525.679013515995,530.584288294433,535.496943180170,540.416924105998,545.344177791155,550.278651724286,
 555.220294146895,560.169054037273,565.124881094874,570.087725725134,575.057539024710,580.034272767131,585.017879388839,590.008311975618,595.005524249382,600.009470555327,
 605.020105849424,610.037385686239,615.061266207085,620.091704128477,625.128656730891,630.172081847810,635.221937855060,640.278183660408,645.340778693435,650.409682895655,
 655.484856710889,660.566261075874,665.653857411106,670.747607611913,675.847474039737,680.953419513637,686.065407301994,691.183401114411,696.307365093814,701.437263808737,
 706.573062245787};
long double DirectFact(int n)
{
    if(n < 0) return 0; 
    if (n == 0)return 1; 
    else return n*DirectFact(n-1);
}
//0.5*LN(2*ох()*A170)+A170*(LN(A170)-1)
//formula stirlinga
long double ApproxLnFact(int n)
{
    double pi=3.14159265359;
	long double ret=0.5*log(2*pi*n)+n*(log((long double)n)-1);
	return ret;
}
long double LnFact(int n)
{
	int thr=150;
	if(n<thr)
	{
		//return log(DirectFact(n));
		//long double ret = lnfact[n];
		//printf("N= %d\tLnN= %lf\n", n, ret);
		return lnfact[n];
	}
	else 
	{
		return ApproxLnFact(n);
	}
}
//exact ficher for certain 2x2
long double FicsherExact(int *x)
{
	int i;
	long double ret=0;
	ret+=LnFact(x[0]+x[1]);	
	ret+=LnFact(x[2]+x[3]);
	ret+=LnFact(x[0]+x[2]);
	ret+=LnFact(x[1]+x[3]);
	ret-=LnFact(x[0]+x[1]+x[2]+x[3]);	
	for(i=0;i<4;i++)ret-=LnFact(x[i]);
	//long double redo = ret;
	ret=exp(ret);
	//printf("Internal %d\t%d\t%d\t%d\t\t%Lf\t%Lf\n", x[0],x[1],x[2],x[3],redo, ret);
	return ret;
}
int fisher_exact_test(int a, int b, int c, int d, double &pvalue, double &fold, int depletion_check)//int matrix_opt =1 int tail=0
{            
	double limit=1E-300;
	fold=1;
	//printf("Syntax %s: 1file_input 2file_output 3int mode(0 abcd=input, 1 a,a+b,c,c+d=input) 4int 2x2 optimization_column(1,0 yes,no stroki,kolonki) 5int report pvalue one-tailed test (1 enr -1 depl 0 two-tailed)", argv[0]);	
	if(b==0 || d==0){pvalue=1;return 0;}
	if(a<0 || b<0)return -1;
	if(c<0 || d<0)return -1;
	if(a>b || c>d)return -1;
	int x[4], y[4];					
	b = b - a;
	d = d - c;
	if(c>0)fold=((double)a/(a+b))/((double)c/(c+d));
	else fold=1.01;
	if(fold<1 && depletion_check==0){pvalue=1;return 0;}
	//x[0]=a;x[1]=b;x[2]=c;x[3]=d;
	{
		int ab = a + b;
		int ac = a + c;
		int bd = b + d;
		int cd = c + d;
		int min1 = Min(ab, ac);
		int min2 = Min(bd, cd);
		int min3 = Min(min1, min2);
		x[0] = a; x[1] = b; x[2] = c; x[3] = d;
		if (min3 == ab)
		{
			if (a < b) { x[0] = a; x[1] = b; x[2] = c; x[3] = d; }
			else { x[0] = b; x[1] = a; x[2] = d; x[3] = c; }
		}
		else
		{
			if (min3 == ac)
			{
				if (a < c) { x[0] = a; x[1] = c; x[2] = b; x[3] = d; }
				else { x[0] = c; x[1] = a; x[2] = d; x[3] = b; }
			}
			else
			{
				if (min3 == bd)
				{
					if (b < d) { x[0] = b; x[1] = d; x[2] = a; x[3] = c; }
					else { x[0] = d; x[1] = b; x[2] = c; x[3] = a; }
				}
				else// cd
				{
					if (c < d) { x[0] = c; x[1] = d; x[2] = a; x[3] = b; }
					else { x[0] = d; x[1] = c; x[2] = b; x[3] = a; }
				}
			}
		}
	}
	long double pcrit = FicsherExact(x);
	long double p, ret_a = 0, ret_b = 0;
//	printf("pcrit %g\n", pcrit);
	//for (i = 0; i < 4; i++)y[i] = x[i];		
	y[0] = x[0] + x[1];
	y[1] = 0;//x[1]-x[1];
	y[2] = x[2] - x[1];
	y[3] = x[3] + x[1];
	p = 0;
	do
	{
		p = FicsherExact(y);
		//	printf("External %Lf\n", p);
	//	printf("%d\t%d\t%d\t%d\t", y[0], y[1], y[2], y[3]);
	//	printf("\t%Lf\n", p);
		if (p <= pcrit)ret_a += p;
		else break;
		y[0]--; y[1]++;
		y[2]++; y[3]--;
		//if(y[0]<0 || y[3]<0)break;		
	} while (y[0] >= 0 && y[3] >= 0);
	//printf("Sum1 %Lf\n", ret_a);
	y[0] = 0;//x[0]-x[0]
	y[1] = x[1] + x[0];
	y[2] = x[2] + x[0];
	y[3] = x[3] - x[0];
	//for (i = 0; i < 4; i++)y[i] = x[i];
	p = 0;
	do
	{
		p = FicsherExact(y);
		//	printf("External %Lf\n", p);
		//printf("%d\t%d\t%d\t%d\t", y[0], y[1], y[2], y[3]);
		//printf("\t%Lg\n", p);
		if (p <= pcrit)ret_b += p;
		else break;
		y[0]++; y[1]--;
		y[2]--; y[3]++;
		//if(y[1]<0 || y[2]<0)break;
	} while (y[1] >= 0 && y[2] >= 0);
	//printf("External sum %Lf\n", ret_b);		
	pvalue=ret_a + ret_b;
	if(pvalue<limit)pvalue=limit;
	/*if (tail == 0)pvalue=ret_a + ret_b;
	else
	{
		if (fold>1)pvalue= ret_a;
		else pvalue=ret_b;
	}*/
//	printf("END\n");			
	return 1;
}